---
jupyter: python3
toc-expand: 2
---

# Command Line Interface

Pointblank provides a powerful command-line interface (CLI) that allows you to perform data
validation directly from the terminal without writing Python code. This is especially useful for:

- quick data quality checks in CI/CD pipelines
- exploratory data analysis
- integration with shell scripts and automation workflows
- non-Python users who want to leverage Pointblank's validation capabilities

## Installation

The CLI is automatically available when you install Pointblank:

```bash
pip install pointblank
```

## Terminal Demos

Check out our [CLI terminal demos](../demos/cli-interactive/index.qmd) to see the CLI in action with
comprehensive command examples and real output.

## Basic Usage

The main CLI command is `pb validate-simple`, which performs single-step validations:

```bash
pb validate-simple [DATA_SOURCE] --check [CHECK_TYPE] [OPTIONS]
```

## Data Sources

You can validate various types of data sources:

*CSV files*

```bash
pb validate-simple data.csv --check rows-distinct
```

*Parquet files*

```bash
pb validate-simple data.parquet --check col-vals-not-null --column age
```

*Database tables*

```bash
pb validate-simple "duckdb:///path/to/db.ddb::table_name" --check rows-complete
```

*built-in datasets*

```bash
pb validate-simple small_table --check col-exists --column a
```

## Available Validation Checks

### Data Completeness

- `rows-distinct`: Check if all rows are unique (no duplicates)
- `rows-complete`: Check if all rows are complete (no missing values)
- `col-vals-not-null`: Check if a column has no Null/None/NA values

### Column Existence

- `col-exists`: Verify that a specific column exists in the dataset

### Numeric Value Checks Within Columns

- `col-vals-gt`: column values greater than a fixed value
- `col-vals-ge`: column values greater than or equal to a fixed value
- `col-vals-lt`: column values less than a fixed value
- `col-vals-le`: column values less than or equal to a fixed value

### Value Set Checks Within Columns

- `col-vals-in-set`: column values must be in an defined set

## Examples

#### Basic Validation

```bash
# Check for duplicate rows
pb validate-simple data.csv --check rows-distinct

# Check if all values in 'age' column are not null
pb validate-simple data.csv --check col-vals-not-null --column age

# Check if all values in 'score' are greater than 50
pb validate-simple data.csv --check col-vals-gt --column score --value 50
```

#### Range Validations

```bash
# Check if all ages are less than 100
pb validate-simple data.csv --check col-vals-lt --column age --value 100

# Check if all prices are less than or equal to 1000
pb validate-simple data.csv --check col-vals-le --column price --value 1000

# Check if all ratings are between 1 and 5 (using two commands)
pb validate-simple data.csv --check col-vals-ge --column rating --value 1
pb validate-simple data.csv --check col-vals-le --column rating --value 5
```

#### Set Membership

```bash
# Check if status values are in allowed set
pb validate-simple data.csv --check col-vals-in-set --column status --set "active,inactive,pending"
```

#### Debugging Failed Validations

Use `--show-extract` to see which rows are causing validation failures:

```bash
# Show failing rows when validation fails
pb validate-simple data.csv --check col-vals-lt --column age --value 65 --show-extract

# Limit the number of failing rows shown
pb validate-simple data.csv --check col-vals-not-null --column email --show-extract --limit 5
```

#### Exit Codes for Automation

Use `--exit-code` to make the command exit with a non-zero code when validation fails:

```bash
# For use in CI/CD pipelines
pb validate-simple data.csv --check rows-distinct --exit-code
```

## Output Examples

#### Successful Validation

```
âœ“ Loaded data source: data.csv
âœ“ Col Vals Lt validation completed

Validation Result: Column Values Less Than

  Property            Value
 â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  Data Source         data.csv
  Check Type          col-vals-lt
  Column              age
  Threshold           < 100.0
  Total Rows Tested   1,250
  Passing Rows        1,250
  Failing Rows        0
  Result              âœ“ PASSED

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ âœ“ Validation PASSED: All values in column       â”‚
â”‚   'age' are < 100.0 in data.csv                 â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
```

#### Failed Validation

```
âœ“ Loaded data source: data.csv
âœ“ Col Vals Lt validation completed

Validation Result: Column Values Less Than

  Property            Value
 â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  Data Source         data.csv
  Check Type          col-vals-lt
  Column              age
  Threshold           < 65.0
  Total Rows Tested   1,250
  Passing Rows        1,180
  Failing Rows        70
  Result              âœ— FAILED

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ âœ— Validation FAILED: 70 values >= 65.0 found    â”‚
â”‚   in column 'age' in data.csv                   â”‚
â”‚ ðŸ’¡ Tip: Use --show-extract to see the failing   â”‚
â”‚ rows                                            â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
```

## Integration with CI/CD

The CLI is useful when integrating data validation into your CI/CD pipelines:

```yaml
# Example GitHub Actions workflow
name: Data Validation
on: [push, pull_request]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install pointblank
      - name: Validate data quality
        run: |
          pb validate-simple data/sales.csv --check rows-distinct --exit-code
          pb validate-simple data/sales.csv --check col-vals-not-null --column customer_id --exit-code
          pb validate-simple data/sales.csv --check col-vals-gt --column amount --value 0 --exit-code
```

## Getting Help

Use the `--help` flag to see all available options:

```bash
pb validate-simple --help
```

## Terminal Demonstrations

Check out our [step-by-step terminal demos](../demos/cli-interactive/index.qmd) that show real
command execution with actual output.
