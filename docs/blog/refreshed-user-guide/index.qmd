---
jupyter: python3
html-table-processing: none
title: A Refreshed User Guide
author: Rich Iannone
date: 2025-05-20
freeze: true
---

```{python}
#| echo: false
#| output: false
import pointblank as pb
pb.config(report_incl_footer=False)
```

The Pointblank documentation just got a major upgrade! We've completely overhauled our
**User Guide**. Our goal was to enable readers to start fast on validation and work through the
many pieces needed in realistic situations.

We realized that at the core of Pointblank is the validation plan. Its made up of rules, results,
and steps.

![](validation-three-things.png){width=80%}

For example, the first row is a step that checks whether values in column 'a' are less than `10`.
The `COLUMNS` and `VALUES` column contain the rules used to configure the step. The `PASS` column
for the first row indicates that all 13 values in the column passed.

In this post, we'll cover:

- using a spiral sequence to balance introductory breadth with subsequent depth
- improving examples
- rounding out API coverage
- surfacing advanced topics

This documentation effort fulfills a key component of our
[project roadmap](https://github.com/posit-dev/pointblank#roadmap), where we committed to
providing "high-quality documentation and examples" for our users. As Pointblank's capabilities have
grown, we recognized the need for documentation that not only keeps pace with these new features but
also makes them more accessible to users at all experience levels. The improvements we're
introducing today represent a significant step toward that goal.

Let us walk you through the key improvements in our refreshed **User Guide**!

## Introduction: Embracing the Spiral Sequence

We chose to use a spiral sequence for our Introduction and Validation Plan section. The Introduction
quickly covers parts of validation plan, while each page of the Validation Plan section dives deeper
into different aspects of defining validation rules.

![](breadth-and-depth.png){height=80%}

The new **User Guide** is now organized into five main sections that follow a natural progression
for users:

1. **Getting Started**: introduction and installation to get you up and running quickly
2. **Validation Plan**: comprehensive coverage of creating validation plans from basic to advanced
3. **Advanced Validation**: specialized techniques like expression-based validation and schema validation
4. **Post Interrogation**: tools for analyzing and responding to validation results
5. **Data Inspection**: methods for exploring and understanding your data

With this structuring, we think it'll help newcomers who want to follow a linear learning path *and*
experienced users who need to quickly find specific information.

Here's how the **User Guide** sidebar looked before:

![](docs-before.png){width=80%}

This is it now:

![](docs-now.png){width=80%}

As you can see, more sections, more articles, and an overall nicer look for the sidebar!

## Improving Examples

Every concept is now illustrated with practical, runnable examples that show both the code and its
output. We've adopted an "example-first" approach throughout the guide where we:

- present code examples early in each section
- show the actual output you'll see in your environment
- follow with explanatory text that references what you've already seen

This approach makes learning more intuitive. You see how something works before we explain why it
works that way. For example:

```{python}
import pointblank as pb

# A simple validation that demonstrates core concepts
validation = (
   pb.Validate(data=pb.load_dataset("small_table"))
   .col_vals_gt(columns="d", value=100)
   .interrogate()
)

validation
```

After showing this example and its output, we explain the validation process, making it much easier
to understand the concepts because you've already seen them in action. This pattern appears
throughout the guide for everything from simple validations to complex workflows with multiple
validation steps and custom actions.

We've also significantly improved the presentation of console output. Previously, stdout text would
blend in with the page content, making it difficult to distinguish from regular text. Now, all
console output is displayed in a visually distinct container with a background color, making it
more clear what's code, what's output, and what's explanatory text. This visual separation creates a
much cleaner reading experience, particularly in sections with multiple code examples and their
corresponding outputs.

## Rounding Out API Coverage

Documentation has to balance jobs between a User Guide and an API Reference:

- User Guide: explains concepts that cut across functions -- like common arguments across
[validation methods](/user-guide/validation-methods.qmd) --
- API Reference: explains each individual function

Importantly, user guides often link to the API reference so, as part of this work, we made sure that
all individual API entries are well-documented and linked to from the guide.
Here's an excerpt from the User Guide that shows links marked:

![](links-in-guide.png){width=80%}

## Surfacing Advanced Topics

There's a lot of potential slicing and dicing involved in validation, as well as work after
validation (post interrogation) to make sense of the results. We added pages to the user guide for
some core situations.
In this section, I'll highlight two advanced topics we added pages for:

- segmentation: splitting a column into groups, and validating each group
- step reports: view failing cases (e.g. view rows of data that failed validation)

These are marked in the User Guide sidebar screenshot below:

![](advanced-in-sidebar.png){height=80%}

### Segmentation

Here's a screenshot of a validation report with two validation steps, one for each segment ('low'
and 'high') in the `f` column of the `small_table` dataset.

![](segments.png){width=80%}

Notice that segments split columns into groups and apply the same validation to each of the groups.
Each group is given its own step.

Each of the 20+ validation methods accept a `segment=` argument. The value of the Segments page in
the User Guide is to describe this cross-cutting behavior in a single place.

Compare the `segments=` parameter in the API Reference (e.g., for [`col_vals_gt()`](../../reference/Validate.col_vals_gt.qmd))
to the [Segments page in the User Guide](../../user-guide/segmentation.qmd) to get a feel for
how each place documents segments.

### Step Report

Step reports display failing cases (e.g., rows) for a validation step, so you can dig deeper into
validation failures. Here's a screenshot of a step report for some validation step 2:

![](step-report.png){width=80%}

Notice the arrow pointing to 'Step 2' in the title. Failing values are highlighted in red. Once we
know we have failures, it's important to take action and discover *why* data is failing. Looking at
cases in step reports often uncover obvious causes behind failures.

`get_step_report()` is one of 50 entries in the API Reference. Here it is listed the API Reference,
in the [Interrogation and Reporting section](../../reference/index.qmd#interrogation-and-reporting).
Critically, it's only one of 20 entries in the [User Guide](../../user-guide/index.qmd), which
emphasizes its importance in validation workflows.

## Looking Forward

The refreshed **User Guide** is just the beginning of our documentation improvements. We're
committed to continuously enhancing our documentation to support your data validation needs.

Michael Chow gave feedback on this User Guide in preparation for his
[upcoming talk at SciPy 2025](https://cfp.scipy.org/scipy2025/talk/NRMNDX/).

We'd love to hear your feedback on the new User Guide! Feel free to open an issue on our
[GitHub repository](https://github.com/posit-dev/pointblank/issues) with suggestions, corrections,
or requests for additional topics you'd like to see covered. You can also join our community
discussions in the dedicated `#Documentation` channel on our
[Discord server](https://discord.com/invite/YH7CybCNCQ), where you can share ideas, ask questions,
and get help directly from the Pointblank team and other users.
